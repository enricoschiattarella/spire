// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/server/keymanager (interfaces: KeyManager,Plugin)

// Package mock_keymanager is a generated GoMock package.
package mock_keymanager

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	keymanager "github.com/spiffe/spire/proto/server/keymanager"
	reflect "reflect"
)

// MockKeyManager is a mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return m.recorder
}

// GenerateKey mocks base method
func (m *MockKeyManager) GenerateKey(arg0 context.Context, arg1 *keymanager.GenerateKeyRequest) (*keymanager.GenerateKeyResponse, error) {
	ret := m.ctrl.Call(m, "GenerateKey", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.GenerateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey
func (mr *MockKeyManagerMockRecorder) GenerateKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockKeyManager)(nil).GenerateKey), arg0, arg1)
}

// GetPublicKey mocks base method
func (m *MockKeyManager) GetPublicKey(arg0 context.Context, arg1 *keymanager.GetPublicKeyRequest) (*keymanager.GetPublicKeyResponse, error) {
	ret := m.ctrl.Call(m, "GetPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.GetPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockKeyManagerMockRecorder) GetPublicKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockKeyManager)(nil).GetPublicKey), arg0, arg1)
}

// GetPublicKeys mocks base method
func (m *MockKeyManager) GetPublicKeys(arg0 context.Context, arg1 *keymanager.GetPublicKeysRequest) (*keymanager.GetPublicKeysResponse, error) {
	ret := m.ctrl.Call(m, "GetPublicKeys", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.GetPublicKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeys indicates an expected call of GetPublicKeys
func (mr *MockKeyManagerMockRecorder) GetPublicKeys(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeys", reflect.TypeOf((*MockKeyManager)(nil).GetPublicKeys), arg0, arg1)
}

// SignData mocks base method
func (m *MockKeyManager) SignData(arg0 context.Context, arg1 *keymanager.SignDataRequest) (*keymanager.SignDataResponse, error) {
	ret := m.ctrl.Call(m, "SignData", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.SignDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignData indicates an expected call of SignData
func (mr *MockKeyManagerMockRecorder) SignData(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignData", reflect.TypeOf((*MockKeyManager)(nil).SignData), arg0, arg1)
}

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// Configure mocks base method
func (m *MockPlugin) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockPluginMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockPlugin)(nil).Configure), arg0, arg1)
}

// GenerateKey mocks base method
func (m *MockPlugin) GenerateKey(arg0 context.Context, arg1 *keymanager.GenerateKeyRequest) (*keymanager.GenerateKeyResponse, error) {
	ret := m.ctrl.Call(m, "GenerateKey", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.GenerateKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey
func (mr *MockPluginMockRecorder) GenerateKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockPlugin)(nil).GenerateKey), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockPlugin) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockPluginMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockPlugin)(nil).GetPluginInfo), arg0, arg1)
}

// GetPublicKey mocks base method
func (m *MockPlugin) GetPublicKey(arg0 context.Context, arg1 *keymanager.GetPublicKeyRequest) (*keymanager.GetPublicKeyResponse, error) {
	ret := m.ctrl.Call(m, "GetPublicKey", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.GetPublicKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockPluginMockRecorder) GetPublicKey(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockPlugin)(nil).GetPublicKey), arg0, arg1)
}

// GetPublicKeys mocks base method
func (m *MockPlugin) GetPublicKeys(arg0 context.Context, arg1 *keymanager.GetPublicKeysRequest) (*keymanager.GetPublicKeysResponse, error) {
	ret := m.ctrl.Call(m, "GetPublicKeys", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.GetPublicKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKeys indicates an expected call of GetPublicKeys
func (mr *MockPluginMockRecorder) GetPublicKeys(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKeys", reflect.TypeOf((*MockPlugin)(nil).GetPublicKeys), arg0, arg1)
}

// SignData mocks base method
func (m *MockPlugin) SignData(arg0 context.Context, arg1 *keymanager.SignDataRequest) (*keymanager.SignDataResponse, error) {
	ret := m.ctrl.Call(m, "SignData", arg0, arg1)
	ret0, _ := ret[0].(*keymanager.SignDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignData indicates an expected call of SignData
func (mr *MockPluginMockRecorder) SignData(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignData", reflect.TypeOf((*MockPlugin)(nil).SignData), arg0, arg1)
}
